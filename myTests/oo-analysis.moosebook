[{"kind":1,"language":"markdown","value":"# Analyzing Java with Moose 8 and VSCode"},{"kind":1,"language":"markdown","value":"## Clone the Java project you want to analyze"},{"kind":2,"language":"pharo","value":"javaProjectFileRef := MooseEasyUtility cloneGitHubRepo: 'https://github.com/bethrobson/Head-First-Design-Patterns'."},{"kind":1,"language":"markdown","value":"## Parse Java to make FAMIX model"},{"kind":1,"language":"markdown","value":"\r\nSetup"},{"kind":2,"language":"pharo","value":"client := ZnClient new.\r\n    client\r\n        signalProgress: true;\r\n        url: 'https://github.com/moosetechnology/VerveineJ/archive/v1.0.2.zip';\r\n        downloadTo: FileLocator imageDirectory.\r\n    client isSuccess\r\n        ifTrue: [ ZipArchive new\r\n                readFrom: (FileLocator imageDirectory / 'v1.0.2.zip') asFileReference pathString ;\r\n                extractAllTo: FileLocator imageDirectory.\r\n\r\n            \"Since permissions are not preserved with ZipArchive#extractAllTo:\"\r\n            LibC runCommand: 'chmod u+x ', (FileLocator imageDirectory / 'VerveineJ-1.0.1/verveinej.sh') asFileReference pathString ]\r\n        ifFalse: [ self inform: 'Download failed.' ]"},{"kind":1,"language":"markdown","value":"Parse"},{"kind":2,"language":"pharo","value":"wizard := MooseEasyFamixMaker\r\n     generateMSETo: 'tmp/HFDP.mse' asFileReference\r\n     parsing: 'tmp/MooseEasyRepos/bethrobson__Head-First-Design-Patterns' asFileReference\r\n     with: (FileLocator imageDirectory / 'VerveineJ-1.0.2/verveinej.bat') asFileReference.\r\nwizard generateMSE."},{"kind":1,"language":"markdown","value":"## Load model of Java source (into Moose)"},{"kind":2,"language":"pharo","value":"mseFileRef := 'tmp/HFDP.mse' asFileReference. \"Generated by FamixMaker\"\r\nmseStream := mseFileRef readStream.\r\nmseStream\r\n\tifNotNil: [ \r\n\t\tmooseModel := MooseModel importFromMSEStream: mseStream. \r\n\t\tmooseModel rootFolder:\r\n      'tmp/MooseEasyRepos/bethrobson__Head-First-Design-Patterns'.\r\n\t\tmseStream close. ]\r\n\tifNil: [ self error: \r\n    'Could not load MSE file into Moose: ' , mseFileRef asString ].\r\nmseStream.\r\nmooseModel install"},{"kind":1,"language":"markdown","value":"## Analysing with Moose"},{"kind":1,"language":"markdown","value":"### Visualize a Java package in PlantUML"},{"kind":2,"language":"pharo","value":"\"Install PlantUMLPharo\"\r\nversion := 'master'.\r\nMetacello new\r\n\t\trepository: 'github://fuhrmanator/PlantUMLPharoGizmo:' , version, '/src';\r\n\t\tbaseline: 'PUGizmo';\r\n\t\tload."},{"kind":1,"language":"markdown","value":"Create the PlantUML code"},{"kind":2,"language":"pharo","value":"attribute := true.\r\nmethod := false.\r\ninheritance := false.\r\naggregation := false.\r\ncreateCheckBox := false.\r\n\r\npreference := 'set namespaceSeparator ::' , String cr\r\n\t\t, 'hide empty members' , String cr , 'scale 1' , String cr\r\n\t\t, 'left to right direction' , String cr.\r\n\r\nitems := mooseModel allModelClasses select: [:each | each mooseName beginsWith: 'headfirst::designpatterns::combining::decorator' ].\r\n\r\n\r\npUMLSource := PUGizmo\r\n\t\tplantUMLSourceForMooseJavaClasses: items\r\n\t\twithPreference: preference\r\n\t\twithRelationships:\r\n\t\t\t{attribute.\r\n\t\t\tmethod.\r\n\t\t\tinheritance.\r\n\t\t\taggregation.\r\n\t\t\tcreateCheckBox}.\r\n\r\nplantKey := pUMLSource asPlantUMLKey.\r\nserverUrl := 'https://www.plantuml.com/plantuml/img/', plantKey.  \r\nimageMorph := (ZnEasy getPng: serverUrl asUrl)."},{"kind":1,"language":"markdown","value":"### Using Pharo"},{"kind":2,"language":"pharo","value":"\"Query all classes that have more than two direct FAMIX superclasses\"\r\nclassesImplementingMoreThanOneInterface := mooseModel allModelClasses \r\n\tselect: [ :each | \r\n\t\teach directSuperclasses size > 2 ].\r\nString streamContents: [ :stream | classesImplementingMoreThanOneInterface do: [:class | stream << class name ] separatedBy: [stream << ', ' ] ]"},{"kind":2,"language":"pharo","value":"canvas := RSCanvas new.\r\nclasses := { Array. String. Dictionary. Set }.\r\nb := RSPie new.\r\nb objects: classes.\r\nb slice: #numberOfMethods.\r\nb build.\r\nb renderIn: canvas.\r\ncanvas"},{"kind":2,"language":"pharo","value":"canvas := RSCanvas new.\r\n\r\nshapes := Collection withAllSubclasses collect: [ :cls | | methods |\r\n    methods := cls methods collect: [:met | RSBox new color: Color black; size: 5; yourself ].\r\n    RSGridLayout on: methods.\r\n    RSComposite new\r\n        model: cls;\r\n        popup;\r\n        shapes: methods;\r\n        padding: (Margin\r\n            left: 50\r\n            right: 5\r\n            top: 20\r\n            bottom: 5);\r\n        color: Color blue translucent;\r\n        yourself  ].\r\nRSGridLayout on: shapes.\r\ncanvas addAll: shapes.\r\ncanvas @ RSCanvasController.\r\n^ canvas"},{"kind":2,"language":"pharo","value":"| data radius color canvas border |\r\n\t\"1800 ellipses\"\r\n\tdata := 0 to: 358 by: 2.\r\n\tcanvas := RSCanvas new.\r\n\tradius := NSScale linear\r\n\t\tdomain: #(1 10);\r\n\t\trange: #(180 240).\r\n\tcolor := NSScale linear\r\n\t\tdomain: #(1 7 10);\r\n\t\trange: #('brown' '4682b4' 'brown').\r\n\tborder := RSBorder new.\r\n\t1 to: 10 do: [ :i |\r\n\t\tcanvas addAll: (data collect: [ :a | \r\n\t\t\t| d |\r\n\t\t\td := a degreesToRadians.\r\n\t\t\tRSEllipse new\r\n\t\t\t\tradius: 4.5;\r\n\t\t\t\tcolor: (color scale: i);\r\n\t\t\t\tborder: border;\r\n\t\t\t\tposition: (radius scale: i) * (d cos @ d sin);\r\n\t\t\t\tyourself ]).\r\n\t\t ].\r\n\tcanvas @ RSCanvasController.\r\n\t^ canvas"}]