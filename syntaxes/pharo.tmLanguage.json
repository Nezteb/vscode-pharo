{
	"information_for_contributors": [
		"This file has been converted from https://github.com/textmate/smalltalk.tmbundle/blob/master/Syntaxes/SmallTalk.tmLanguage",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
    "name": "Pharo",
    "foldingStartMarker": "\\[",
    "foldingStopMarker": "^\\s*\\]|^\\s\\]",
    "keyEquivalent": "^~S",
    "fileTypes": [
        "st"
    ],
    "patterns": [
        {
            "match": "\\$.",
            "name": "constant.character.pharo"
        },
        {
            "match": "\\b(class)\\b",
            "name": "storage.type.$1.pharo"
        },
        {
            "match": "\\b(extend|super|self)\\b",
            "name": "storage.modifier.$1.pharo"
        },
        {
            "match": "\\b(yourself|new|Smalltalk)\\b",
            "name": "keyword.control.$1.pharo"
        },
        {
            "match": ":=",
            "name": "keyword.operator.assignment.pharo"
        },
        {
            "comment": "Parse the variable declaration like: |a b c|",
            "match": "\/^:\\w*\\s*\\|\/",
            "name": "constant.other.block.pharo"
        },
        {
            "captures": {
                "1": {
                    "name": "punctuation.definition.instance-variables.begin.pharo"
                },
                "2": {
                    "patterns": [
                        {
                            "match": "\\w+",
                            "name": "support.type.variable.declaration.pharo"
                        }
                    ]
                },
                "3": {
                    "name": "punctuation.definition.instance-variables.end.pharo"
                }
            },
            "match": "(\\|)(\\s*\\w[\\w ]*)(\\|)"
        },
        {
            "captures": {
                "1": {
                    "patterns": [
                        {
                            "match": ":\\w+",
                            "name": "entity.name.function.block.pharo"
                        }
                    ]
                }
            },
            "comment": "Parse the blocks like: [ :a :b | ...... ]",
            "match": "\\[((\\s+|:\\w+)*)\\|"
        },
        {
            "include": "#numeric"
        },
        {
            "match": "<(?!<|=)|>(?!<|=|>)|<=|>=|=|==|~=|~~|>>|\\^",
            "name": "keyword.operator.comparison.pharo"
        },
        {
            "match": "(\\*|\\+|\\-|\/|\\\\)",
            "name": "keyword.operator.arithmetic.pharo"
        },
        {
            "match": "(?<=[ \\t])!+|\\bnot\\b|&|\\band\\b|\\||\\bor\\b",
            "name": "keyword.operator.logical.pharo"
        },
        {
            "comment": "Fake reserved word -> main Smalltalk messages",
            "match": "(?<!\\.)\\b(ensure|resume|retry|signal)\\b(?![?!])",
            "name": "keyword.control.pharo"
        },
        {
            "comment": "Fake conditionals. Smalltalk Methods.",
            "match": "ifCurtailed:|ifTrue:|ifFalse:|whileFalse:|whileTrue:",
            "name": "keyword.control.conditionals.pharo"
        },
        {
            "captures": {
                "1": {
                    "name": "entity.other.inherited-class.pharo"
                },
                "3": {
                    "name": "keyword.control.pharo"
                },
                "4": {
                    "name": "entity.name.type.class.pharo"
                }
            },
            "match": "(\\w+)(\\s+(subclass:))\\s*(\\w*)",
            "name": "meta.class.pharo"
        },
        {
            "begin": "\"",
            "beginCaptures": [
                {
                    "name": "punctuation.definition.comment.begin.pharo"
                }
            ],
            "end": "\"",
            "endCaptures": [
                {
                    "name": "punctuation.definition.comment.end.pharo"
                }
            ],
            "name": "comment.block.pharo"
        },
        {
            "match": "\\b(true|false)\\b",
            "name": "constant.language.boolean.pharo"
        },
        {
            "match": "\\b(nil)\\b",
            "name": "constant.language.nil.pharo"
        },
        {
            "captures": {
                "1": {
                    "name": "punctuation.definition.constant.pharo"
                }
            },
            "comment": "messages\/methods",
            "match": "(?>[a-zA-Z_]\\w*(?>[?!])?)(:)(?!:)",
            "name": "constant.other.messages.pharo"
        },
        {
            "captures": {
                "1": {
                    "name": "punctuation.definition.constant.pharo"
                }
            },
            "comment": "symbols",
            "match": "(#)[a-zA-Z_][a-zA-Z0-9_:]*",
            "name": "constant.other.symbol.pharo"
        },
        {
            "begin": "#\\[",
            "beginCaptures": [
                {
                    "name": "punctuation.definition.constant.begin.pharo"
                }
            ],
            "end": "\\]",
            "endCaptures": [
                {
                    "name": "punctuation.definition.constant.end.pharo"
                }
            ],
            "name": "meta.array.byte.pharo",
            "patterns": [
                {
                    "match": "[0-9]+(r[a-zA-Z0-9]+)?",
                    "name": "constant.numeric.integer.pharo"
                },
                {
                    "match": "[^\\s\\]]+",
                    "name": "invalid.illegal.character-not-allowed-here.pharo"
                }
            ]
        },
        {
            "begin": "#\\(",
            "beginCaptures": [
                {
                    "name": "punctuation.definition.constant.begin.pharo"
                }
            ],
            "comment": "Array Constructor",
            "end": "\\)",
            "endCaptures": [
                {
                    "name": "punctuation.definition.constant.end.pharo"
                }
            ],
            "name": "constant.other.array.pharo"
        },
        {
            "begin": "'",
            "beginCaptures": [
                {
                    "name": "punctuation.definition.string.begin.pharo"
                }
            ],
            "end": "'",
            "endCaptures": [
                {
                    "name": "punctuation.definition.string.end.pharo"
                }
            ],
            "name": "string.quoted.single.pharo"
        },
        {
            "match": "\\b[A-Z]\\w*\\b",
            "name": "variable.other.constant.pharo"
        }
    ],
    "repository": {
        "numeric": {
            "patterns": [
                {
                    "match": "(?<!\\w)[0-9]+\\.[0-9]+s[0-9]*",
                    "name": "constant.numeric.float.scaled.pharo"
                },
                {
                    "match": "(?<!\\w)[0-9]+\\.[0-9]+([edq]-?[0-9]+)?",
                    "name": "constant.numeric.float.pharo"
                },
                {
                    "match": "(?<!\\w)-?[0-9]+r[a-zA-Z0-9]+",
                    "name": "constant.numeric.integer.radix.pharo"
                },
                {
                    "match": "(?<!\\w)-?[0-9]+([edq]-?[0-9]+)?",
                    "name": "constant.numeric.integer.pharo"
                }
            ]
        }
    },
    "scopeName": "source.pharo",
    "uuid": "1ED64A34-BCB1-44E1-A0FE-84053003E232"
}